<?xml version="1.0" encoding="UTF-8"?>
<project name="all" default="clean" basedir="..">
    <!--<property name="src.dir" value="${basedir}/src/"/>-->
    <property name="lib.dir" value="lib/"/>
    <property name="jar.dir" value="out/artifacts/"/>
    <property name="compiled.dir" value="out/compiled/"/>
    <property name="test.dir" value="out/test/"/>
    <property name="original_res.dir" value="${basedir}/original_res/"/>
    <property name="seqlib.name" value="domains.seqlib"/>
    <property name="res.dir" value="res/"/>
    <property name="testscript.file" value="${basedir}/scripts/test_gotoh.sh"/>
    <property name="lmu.server" value="remote.cip.ifi.lmu.de"/>
    <property name="bioclient.server" value="bioclient6.bio.ifi.lmu.de"/>
    <property name="remote.path.to.gotoh.dir" value="~/git/gobi/Gotoh/"/>
    <property file="xml/build.properties"/>
    <propertyfile file="xml/build.properties">
        <entry key="built.nr" default="0" type="int" operation="+"/>
        <entry key="last_exec.date" type="date" value="now" default="now" pattern="DD.MM.YY HH.mm"/>
    </propertyfile>


    <path id="class.path">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="goannotate.class.path">
        <pathelement location="out/compiled/kabsch"/>
    </path>

    <target name="clean">
        <delete dir="${jar.dir}"/>
        <delete dir="${compiled.dir}"/>
        <delete file="${res.dir}goannotate.jar"/>
        <delete file="${proteinlist.file}"/>
        <delete file="${ps_scan.input.file}"/>
        <delete file="${ps_scan.output.file}"/>
    </target>

    <target name="compile-kabsch" depends="clean">
        <echo>=== COMPILE Kabsch ===</echo>
        <mkdir dir="${compiled.dir}kabsch"/>
        <javac srcdir="Kabsch/src" destdir="${compiled.dir}kabsch" includeantruntime="false">
            <classpath refid="class.path"/>
        </javac>
    </target>

    <target name="compile-goannotate" depends="compile-kabsch">
        <echo>=== COMPILE GOAnnotate ===</echo>
        <mkdir dir="${compiled.dir}goannotate"/>
        <javac srcdir="GOAnnotate/src" destdir="${compiled.dir}goannotate" includeantruntime="false">
            <classpath refid="goannotate.class.path"/>
        </javac>
    </target>

    <target name="jar-goannotate" depends="compile-goannotate">
        <echo>=== JAR ===</echo>
        <echo>creating goannotate.jar ...</echo>
        <jar destfile="${jar.dir}goannotate.jar" basedir="${compiled.dir}goannotate">
            <manifest>
                <attribute name="Main-Class" value="main.Main"/>
            </manifest>
        </jar>
        <echo>finished createing goannotate.jar</echo>
    </target>

    <target name="prepare-goannotate" depends="jar-goannotate">
        <copy file="${jar.dir}goannotate.jar" todir="${res.dir}"/>
    </target>

    <target name="proteinlist" depends="prepare-goannotate">
        <java jar="${res.dir}goannotate.jar" fork="true">
            <arg value="${go.xml.file}"/>
            <arg value="${biomart.ensp.file}"/>
            <arg value="subclass"/>
            <arg value="protein"/>
            <arg value="${protein.id}"/>
            <arg value="output"/>
            <arg value="${proteinlist.file}"/>
        </java>
    </target>

    <target name="prepare-ps_scan" depends="proteinlist">
        <exec executable="${python.exec}">
            <arg value="${python.script.get.fasta.seq.file}"/>
            <arg value="${seqlib.file}"/>
            <arg value="${proteinlist.file}"/>
            <arg value="${ps_scan.input.file}"/>
        </exec>
    </target>

    <target name="ps_scan" depends="prepare-ps_scan">
        <exec executable="${perl.exec}" output="${ps_scan.output.file}">
            <arg line="${exec.ps_scan.file} -s -d ${prosite.database.file} -o fasta ${ps_scan.input.file}"/>
        </exec>
    </target>

    <target name="stats" depends="ps_scan">
        <exec executable="${python.exec}">
            <arg value="${python.script.stats.file}"/>
            <arg value="${ps_scan.output.file}"/>
            <arg value="${stats.file}"/>
        </exec>
    </target>

    <target name="png" depends="stats">
        <exec executable="${r.exec}">
            <arg line="CMD BATCH ${r.script.file}"/>
        </exec>
    </target>
</project>